#include<iostream>
#include<vector>
#include<queue>
#include<functional>
using namespace std;

inline long unionCards(long& card1 , long& card2)
{
	card1 = card1 + card2;
	card2 = card1;
	return 1;
}

int main(void)
{
	long cards;
	long unionCard;
	long unionCounter = 0;
	priority_queue<long,vector<long>,greater<long>> pq;
	
	cin >> cards >> unionCard;
	for(int i = 0 ; i < cards ; i++)
	{
		long t;
		cin >> t;
		pq.push(t);
	}
	
	while(unionCounter != unionCard)
	{
		long card1 = pq.top();
		pq.pop();
		long card2 = pq.top();
		pq.pop();
		unionCounter += unionCards(card1,card2);
		pq.push(card1);
		pq.push(card2);
	}
	
	long result = 0;
	while( !pq.empty() )
	{
		result += pq.top();
		pq.pop();
	}
	cout << result;
	
	return 0;
}

/*
카드 N장은 자연수가 기입됨 i번엔 a[i]가 쓰여짐
카드 합체법은 다음과 같음
	x번 카드 y번 카드 값을 더함
	계산한 값은 x번, y번 카드 모두 덮어씀
카드합체는 m번함
모두 더한 값이 놀이 점수가 된다.
가장 작은 점수가 목표.

가장 작은 값 1번 2번을 계속해서 더해보면 나오는 문제다
즉 1, 2, 3, 4, 5면
1 2 합치고 3 3 합치면 
2 4 5 6 6 이니 2, 3을 합친다.
<<계속해서 정렬된 값을 요구한다!>> 
	== Priority Queue가 필요하다

input
4 2
4 2 3 1 
answer = 19 [(2 + 1) (3 + 3) 4 3 6 6 = 19]
input
5 3
1 2 3 4 5
answer = 3 3 3 4 5 | 3 4 5 6 6 | 5 6 6 7 7 : 31
*/
