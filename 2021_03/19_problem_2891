#include<iostream>

using namespace std;

inline bool isInside(int target, int totalTeam)
{
	return (1 <= target) && (target <= totalTeam);
}

void rentKayaq(int kayaq[] , int totalTeam)
{
	for(int i = 1 ; i <= totalTeam ; i++)
	{
		if( kayaq[i] == 2 )
		{ // 여분이 있다면
			if( isInside(i-1 , totalTeam) && kayaq[i-1] == 0 )
			{
				kayaq[i] = kayaq[i] - 1;
				kayaq[i-1] = kayaq[i-1] + 1;
			}
		}
		if( kayaq[i] == 2 )
		{ // 여분이 있다면
			if( isInside(i-1 , totalTeam) && kayaq[i+1] == 0 )
			{
				kayaq[i] = kayaq[i] - 1;
				kayaq[i+1] = kayaq[i+1] + 1;
			}
		}
	}
}

inline void printArr(int arr[] , int len)
{
	for(int i = 1 ; i <= len ; i++)
		cout << arr[i] << " ";
	cout << "\n";
}

int main(void)
{
	int totalTeam, brokenKayaq, spareKayaq;
	cin >> totalTeam >> brokenKayaq >> spareKayaq;
	
	int kayaq[totalTeam + 1] = {};
	for(int i = 1 ; i <= totalTeam ; i++)
		kayaq[i] = 1;
	for(int i = 0 ; i < brokenKayaq ; i++)
	{ // 손상된 카약
		int temp;
		cin >> temp;
		kayaq[temp] = kayaq[temp] - 1;
	}
	for(int i = 0 ; i < spareKayaq ; i++)
	{ // 여분의 카약
		int temp;
		cin >> temp;
		kayaq[temp] = kayaq[temp] + 1;
	}
	
	rentKayaq(kayaq , totalTeam);
	
//	printArr(kayaq , totalTeam);
	int count = 0;
	for(int i = 1 ; i <= totalTeam ; i++)
		kayaq[i] == 0 ? count++ : count;
	
	cout << count;
	
	return 0;
}
/*
4번팀 -> 카약 3 5 빌려줌
카약 부서진 팀 = 못 빌려줌

카약 부서진 팀 , 여분 카약 가져온 팀 주어짐

카약 적절히 렌트시 출발 못하는 팀의 최솟값 =?

방법 1.
모든 팀에게 카약 1개를 준다
즉 카약[] = {1,1,1,1,1...}
카약 더 가져온 팀에게 +1 해준다 카약[] = {2,1,1,1...}
부서진 팀은 -1해준다

값이 2인 (여분있는) 팀은 앞 선수부터 나눠준다
{ 1 2 2 0 0 2 0 2 }
  1 2 1 1 1 1 1 1 

  1 2 2 0 0 2 0 2

0 0 2 0 2 2 2 0
0 1 1 1 1 2 1 1

1 2 0 2 0 0 2 2 0
1 1 1 1 1 1 1 1 1
*/
