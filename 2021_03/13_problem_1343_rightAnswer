#include<iostream>
#include<string>
#include<vector>
using namespace std;

vector<string> tokenize(string board)
{ // token을 기준으로 문자열을 자른다
	vector<string> v;
	char token = board[0];
	board = board + token;
	int len = 0; 
	int startPoint = 0;

	for(int i = 0 ; i < board.length() ; i++)
	{
		if( i == board.length()-1 )
		{
			v.push_back( board.substr(startPoint,len) );
			break;
		}
		if(board[i] == token)
		{// X이면
			len++;
		}
		else
		{
	//		cout << "board token : " << board <<" || "<<token << " startPoint , len " << startPoint << " " << len << "\n";
			token = board[i];
			v.push_back( board.substr(startPoint,len) );
			startPoint = i;
			len = 1;
		}
	}
	
	return v;
}

bool isCoverable(const vector<string>& v)
{
	bool flag = true;
	for(size_t i = 0 ; i < v.size() ; i++)
	{
		if(v[i][0] == '.')
			continue;
		(v[i].size() & 1) ? flag = false : flag = true;
		if(flag == false)
			return flag;
//		cout << "i , flag : " << i << " " << flag << "\n";
	}
	return flag;
}

inline void printXString(const string& s)
{
	int fourA = s.length() / 4;
	int twoB = (s.length()%4) / 2;
	for(int i = 0 ; i < fourA ; i++)
		cout << "AAAA";
	for(int i = 0 ; i < twoB ; i++)
		cout << "BB";
}


int main(void)
{
	string board;
	cin >> board;

	vector<string> v = tokenize(board );
	
/*	for( auto i : v)
		cout << " 출력: " << i << " ";
	cout << "\n";
*/
	bool flag = isCoverable(v);
	
	if(!flag)
	{
		cout << "-1";
		return 0;
	}
	else
	{
		for(int i = 0 ; i < v.size() ; i++)
		{
			if(v[i][0] == '.')
				cout << v[i];
			else
				printXString( v[i] );
		}
	}
	
	return 0;
}
