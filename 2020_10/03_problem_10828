#include <iostream>
#include <vector>
#include <string>
using namespace std;

typedef struct stack
{
	vector <int> arr;
	int size = 0;
	int &empty = size;
	int top = -1;
}stack;

inline void empty(stack &s)
{
	(s.empty == 0) ? cout << "1\n" : cout << "0\n";
}
inline void pop(stack &s)
{
	if (s.empty == 0)
	{ // 비었으면
		printf("-1\n");
		return ;
	}
	printf("%d\n",s.arr[s.top]);
	s.top = s.top - 1;
	s.size = s.size -1;
	s.arr.pop_back();
}
inline void top(stack &s)
{
	if(s.empty > 0)
		cout << s.arr[s.top] << "\n";
	else
		cout << "-1\n";
}
inline int size(stack &s)
{
	cout << s.size << "\n";
	return s.size;
}
inline void stack_push(stack &s , int x)
{
	s.size = s.size + 1;
	s.top = s.top + 1;
	s.arr.push_back(x);
}

vector<string> tokenize(string &command)
{
	vector<string> v;
	command = command + ' ';
	int start = 0; 
	int len = 0;
	string str;
	for(int i = 0 ; i < command.length() ; i++)
	{
		if(command[i] == ' ')
		{
			v.push_back( command.substr(start,len) );
			start = start+len+1;
			len = 0;
		}
		else
			len++;
	}
	return v;
}

inline int str_to_int(string &str)
{
	int s = 0;
	for(int i = 0 ; i < str.length() ; i++)
	{
		int t = str[i] - '0';
		s = (s*10 + t);
	}
//	printf("%d\n",s);
	return s;
}

int main() {
	string command;
	stack s;
	int X;
	int n;
	cin >> n;
	getchar();

	for(int i = 0 ; i < n ; i++)
	{
		getline(cin,command);
		vector<string> token = tokenize(command);
		if(token.size() == 1)
		{//top,size,empty,pop 이라면
			if(token[0] == "pop") pop(s);
			if(token[0] == "size") size(s);
			if(token[0] == "empty") empty(s);
			if(token[0] == "top") top(s);
		}
		else
			stack_push(s, str_to_int(token[1]) );
//			printf("str_to_int(token[1])) : %d\n",str_to_int(token[1]));
	}
		
	return 0;
}
