pair<int,int>& operator+=(pair<int,int>& left , const pair<int,int>& right)
{
	left.first = left.first + right.first;
	left.second = left.second + right.second;
	return left;
}

pair<int,int> operator+(pair<int,int> left , const pair<int,int>& right)
{
	left += right;
	return left;
}

template <typename T>
inline bool compare_pair(const T &p1 , const T &p2)
{
	return (p1.first == p2.first && p1.second == p2.second) ? true : false;
}

template <typename T>
bool operator==(const pair<T,T>& left , const pair<T,T>& right)
{
	return (p1.first == p2.first && p1.second == p2.second) ? true : false;
}

template <typename T>
ostream& operator <<(ostream&, const pair<T,T>& p)
{
	cout << "(" << pair.first << ", " << pair.second << ") ";
}


/*pii a(0,0);
	pii b(2,2);
	pii c(8,8);
	a += kUp;
	cout << "a : " << a.first << " " << a.second << endl;
	a = a + b;
	cout << "a : " << a.first << " " << a.second << endl;
	a = a + b + c;
	cout << "a : " << a.first << " " << a.second << endl;
	cout << "b : " << b.first << " " << b.second << endl;
*/
