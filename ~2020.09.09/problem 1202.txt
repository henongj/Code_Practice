#include <cstdio>
#include <utility>
#include <algorithm>
#include <queue>

using namespace std;

const int Max = 300000;
const int is_full = -1;

bool cmp(const pair<int,int> &a, const pair<int,int> &b)
{
	bool t = true; bool f = false;
	return (a.second > b.second) ? t : f;
}
void input(int n,int k, pair<int,int> jewery[] , int bag[])
{
	int t1 , t2;
	for(int i = 0 ; i < n ; i++)
	{
		scanf("%d %d\n",&t1,&t2);
		jewery[i] = make_pair(t1,t2); // 무게 , 가격
	}
	for(int i = 0 ; i<k ; i++)
	{
		scanf(" %d", &bag[i]);
	}
}

int main(void)
{
	int n,k;
	pair <int,int> jewery[Max];
	int bag[Max] = {};
	long long int sum = 0;
	scanf("%d %d\n", &n , &k);
	input(n,k , &jewery[0] , bag);
	
	sort(jewery,jewery+n); //가장 가벼운 보석을 위로
	sort(bag,bag+k);//한계 무게가 작은 것을 위로
	
	priority_queue <int> pq; // 우선순위 큐
	
	int j = 0; // for문 밖에서 선언해야
	// 한 번 넣은거 또 집어넣지 않는다.
	for(int i = 0 ; i < k ; i++)
	{//무게제한이 가장 낮은 가방은
		while( j < n && bag[i] >= jewery[j].first )
		{//가장 가벼운 가방에 가장 가벼운 보석부터 다 집어넣는다
			pq.push(jewery[j].second);
			j++; // push한 보석은 다시 돌아보지 않는다.
		}
		if( !pq.empty() )
		{
			sum = sum + pq.top();//그중에서 가장 비싼걸 선택
			pq.pop();//가방에 담으니  pop
		}
	}
//이때 priority queue를 for 안에 선언하지 않는 이유는 담을 수 있는
    //보석을 잃어버리면 가벼운데 비싼 보석을 잃어버리기 때문
	
	printf("%lld",sum);
	
	return 0;
}