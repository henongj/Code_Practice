#include <cstdio>
#include <iostream>
#include <algorithm>
#include <vector>
#include <queue>
using namespace std;

void DFS(int start, const vector<int> *v, int *check)
{
	if(*(check+start)) return;
	*(check+start) = true;
	printf("%d " , start);
	for(int i = 0 ; i < v[start].size() ;i++)
	{
		int y = v[start][i];
/*			for(int i = 0 ; i < v[start].size()-1 ; i++)
			{
				if(v[start][i] < v[start][i+1])
					y = v[start][i];
				else
					y = v[start][i+1];
			}*/
		DFS(y,v,check);
	}
}
void BFS(int start, const vector<int> *v, int *check)
{
	queue<int> q;
	q.push(start);
	*(check+start) = true;
	while(!(q.empty()))
	{
		int x = q.front();
//		cout << "q.front x : " << x << endl;
		q.pop();
		printf("%d " , x);
		for(int i = 0 ; i < v[x].size() ;i++)
		{
			int y = v[x][i];
/*			for(int i = 0 ; i < v[x].size()-1 ; i++)
			{
				if(v[x][i] < v[x][i+1])
					y = v[x][i];
				else
					y = v[x][i+1];
			} // 가장 작은 값을 y로*/
			if(!check[y])
			{
				q.push(y);
				*(check+y) = true;
			}
		}
	}	
}
 
bool compare(const vector<int> &a ,const vector<int> &b)
{
	if(a<b)
		return true;
	else
		return false;
}
 
int main(void) {
	
	int N, M, start;
 
	scanf(" %d", &N); //노드의 갯수
	scanf(" %d", &M); //노선의 갯수
	scanf(" %d", &start); //시작번호 = 3
	int n = N+1;
	vector<int> v[n];
	int check[n] = {};
 
 
	for(int i = 0 ; i < M ; i++)
	{
		int temp1, temp2;
		scanf(" %d", &temp1);
		scanf(" %d", &temp2);
		v[temp1].push_back(temp2);
		v[temp2].push_back(temp1);
	}

	for(int i = 0 ; i < n ; i++)
	{
		sort(v[i].begin(),v[i].end());
	}
/*	for(int i = 0 ; i < M ; i ++)
	{
		for(int j = 0 ; j < v[i].size();j++)
		{
			printf("%d " ,v[i][j]);
		}
		puts("");
	}
		puts("DFS AND BFS NEXT LINE");*/



	DFS(start, v , check);
	puts("");
	for(int i = 0 ; i < n ; i ++)
		check[i] = false;
	BFS(start, v , check);
 
	return 0;
}