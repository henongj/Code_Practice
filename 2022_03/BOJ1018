#include<iostream>
#include<vector>
#include<string>
using namespace std;

class chessBoard
{
    public :
    chessBoard(int row, int col)
        {
            string s;
            m_rowLength = row; m_colLength = col;
            for(int i = 0  ; i < row ; i++)
            {
                cin >> s;
                chessBoardColor.push_back(s);
            }
 //           for(int i = 0 ; i < chessBoardColor.size() ; i++)
 //                cout << chessBoardColor[i] << "\n";
        }
    int countToChangeBoard(); // 바꿔야 하는 색의 수를 샌다.

    private :
        vector<string> whiteChessBoard = {"WBWBWBWB","BWBWBWBW","WBWBWBWB","BWBWBWBW","WBWBWBWB","BWBWBWBW","WBWBWBWB","BWBWBWBW"};
        vector<string> BlackChessBoard = {"BWBWBWBW","WBWBWBWB","BWBWBWBW","WBWBWBWB","BWBWBWBW","WBWBWBWB","BWBWBWBW","WBWBWBWB"};
        vector<string> chessBoardColor;
        int m_rowLength; int m_colLength; // 보드의 x,y 길이
//        int m_Xrange, m_Yrange; char m_tileColor;// 검수용 변수 m_tileColor는 이전 타일 색
        bool isInside(int row, int col); // 검수중인 좌표가 올바른지 확인해준다
        int countToChangeWhiteBoard(int row, int col);
        int countToChangeBlackBoard(int row, int col);
};

bool chessBoard::isInside(int row, int col)
{
    return (0 <= row && row < m_rowLength) && (0 <= col && col < m_colLength) ? true : false;
}
int chessBoard::countToChangeBlackBoard(int row, int col)
{
    int counter = 0;
    for(int y = 0 ; y < 8 ; y++)
    {
        for(int x = 0 ; x < 8 ; x++)
        {
            if(chessBoardColor[row + x][col + y] == BlackChessBoard[x][y])
                counter++;
        }
    }
    return counter;
}
int chessBoard::countToChangeWhiteBoard(int row, int col)
{
    int counter = 0;
    for(int y = 0 ; y < 8 ; y++)
    {
        for(int x = 0 ; x < 8 ; x++)
        {
//            cout << "(row, col, x, y) : (" << row << ", " << col << ", "<<x<<", "<<y <<")\n";
            if(chessBoardColor[row + x][col + y] == whiteChessBoard[x][y])
                counter++;
        }
    }
    return counter;
}

int chessBoard::countToChangeBoard()
{
    auto min = [](int x, int y, int z){return (x + y) < (y + z) ? (x < y ? x : y): ( y < z  ? y : z);};
    int counter = 9999;
    
    for(int col = 0 ; col < m_colLength - 7 ; col++ )
    {
        for(int row = 0 ; row < m_rowLength - 7 ; row++ )
        {
//            cout << chessBoardColor[col].size() << " " << chessBoardColor.size() << " ";
//           cout << "(row, col) : (" << row << ", " << col << ")\n";
            counter = min( countToChangeBlackBoard(row, col),countToChangeWhiteBoard(row, col), counter);  
        }
    }
    return counter;
}

int main(void)
{
    int col, row;
    cin >> row >> col;
    
    chessBoard chess(row,col);

    cout << chess.countToChangeBoard();
    
    cin >> col;
    return 0;
}
/*
8 9
WBWBWBWBW
BWBWBWBWW
WBWBWBWBW
BWBBBWBWW
WBWBWBWBW
BWBWBWBWW
WBWBWBWBW
BWBWBWBWW
*/
