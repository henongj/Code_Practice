#include<iostream>
#include<string>
using namespace std;

const int kMaximumArraySize = 50;
inline bool isInside(int row, int col, int x, int y)
{// x = 3 이면 [3 , 4 , 5] == ( 3, 3+2 )
	return (0 <= x && x + 2 < col) && (0 <= y && y + 2 < row) ? true : false;
}

inline void inverseArray(int arr[kMaximumArraySize][kMaximumArraySize], int x, int y)
{//행렬 뒤집기
	for(int i = x ; i <= x + 2 ; i++)
	{
		for(int j = y ; j <= y + 2 ; j++)
		{
			arr[i][j] == 0 ? arr[i][j] = 1 : arr[i][j] = 0;
		}
	}
}

inline bool compareMatrix(int A[kMaximumArraySize][kMaximumArraySize], int B[kMaximumArraySize][kMaximumArraySize] , int row , int col)
{//행렬비교
	for(int i = 0 ; i < row ; i++)
	{
		for(int j = 0 ;  j < col ; j++)
		{
			if(A[i][j] != B[i][j])
				return false;
		}
	}
	return true;
}

int main(void)
{
	int A[kMaximumArraySize][kMaximumArraySize];
	int B[kMaximumArraySize][kMaximumArraySize];
	int row, col;
	string str;
	
	cin >> row >> col;
	
	// 행렬 입력
	for(int i = 0 ; i < row ; i++)
	{
		cin >> str;
		for(int j = 0 ; j < col ; j++)
			A[i][j] = str[j] - '0';
	}
	for(int i = 0 ; i < row ; i++)
	{	
		cin >> str;
		for(int j = 0 ; j < col ; j++)
			B[i][j] = str[j] - '0';
	}
	
	//뒤집기
	int counter = 0;
	for(int i = 0 ; i < row ; i++)
	{
		for(int j = 0 ; j < col ; j++)
		{
			if(isInside(row,col,i,j) && A[i][j] != B[i][j])
			{
				inverseArray(A, i, j);
				++counter;
			}
		}
	}
	
	bool flag = compareMatrix(A,B,row,col);
	//A가 B로 될 수 없는지 확인
	
	flag == true ? cout << counter : cout << "-1";
	
	return 0;
}

/*
2 2
00
00
11
11
answer : -1

3 4
0000
0010
0000
1001
1011
1001

answer : 2

3 4
0000
0010
0000
1001
1010
1001

answer : -1

3 3
000
000
000
111
111
111
answer : 1


3 3
000
000
000
111
111
111
answer : 1

4 4
1111
1111
1111
1111
1000
1000
1000
1111
answer : 1

4 4
1111
1111
1111
1111
1111
1100
1100
1100
answer : -1
*/
