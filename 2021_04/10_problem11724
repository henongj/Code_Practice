#include<iostream>
#include<vector>

using namespace std;

void graphTraversal(vector<int> graph[], int visited[], int idx)
{//그래프 순회
	for(int i = 0 ; i < graph[idx].size() ; i++)
	{
		int tempVisitedIndex = graph[idx][i];
		if(visited[ tempVisitedIndex ] != 0)
			continue; // 이미 순회한 것은 건너뛰고
		else
		{
			visited[ tempVisitedIndex ] = 1;
			graphTraversal(graph, visited, tempVisitedIndex);
		}
	}
}


int main(void)
{
	int numOfNodes, numOfEdges;
	cin >> numOfNodes >> numOfEdges;
	vector<int> graph[1001];
	int visited[1001] = {};//각 요소 0
	int counter = 0;
	
	for(int i = 1 ; i <= numOfEdges ; i++)
	{
		int edge1, edge2;
		cin >> edge1 >> edge2;
		graph[edge1].push_back(edge2);
		graph[edge2].push_back(edge1);
	}
	
	for(int i = 1 ; i <= numOfNodes ; i++)
	{
		if(visited[i] != 0)
			continue;
		else
		{
			++counter;
			graphTraversal(graph, visited, i);
		}
	}
	
	cout << counter;
	
	return 0;
}

/*
노드들이 엣지로 연결이 되어 있다

이때 노드는 몇 군집(연결요소, connected component)를 갖는가?

반복문으로 모든 노드를 순회하며 다음 실행

각 노드를 방문한 적이 없다면 ++counter 하면서
탐색 함수를 실행한다.
탐색하면 visited 에 counter 값을 입력하고
해당 노드와 연결된 노드를 방문한다. 단, 이때 counter 변화x

끝나면 counter 출력 

input
6 5
1 2
2 5
5 1
3 4
4 6
answer : 2
input  
6 8
1 2
2 5
5 1
3 4
4 6
5 4
2 4
2 3
answer : 1

input
4 1
1 2
answer : 3
*/
