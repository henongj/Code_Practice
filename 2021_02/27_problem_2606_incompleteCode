#include<iostream>
#include<vector>
using namespace std;

template <typename T>
void printTwoDimensionVector(vector<vector<T>>& v)
{
	for(int i = 0 ; i < v.size() ; i++)
	{
		cout << i << " : ";
		for(int j = 0 ; j < v[i].size() ; j++)
			cout << v[i][j] << " ";
		cout << "\n";
	}
}

int getRootNode(const vector<vector<int>>& v , int rootNodes[] , const int& idx)
{	// 결과 : 가장 부모노드 인 것을 return 한다
	// v[idx]에 가장 작은 원소를 root로 삼되 v[idx][minIdx] != v[idx][minIdx] 면 재귀한다
	cout << "getRootNode run INDEX : " << idx << "\n";
	int rootNode = 101;
	for(int i = 0 ; i < v[idx].size() ; i++)
		rootNode > v[idx][i] ? rootNode = v[idx][i] : rootNode = rootNode;
	if(rootNode > idx)
		rootNode = idx; // rootNode에 가장 작은 값을 찾는다
	
	cout << "rootNode : " << rootNode << "\n";
	if( rootNodes[rootNode] != rootNode ) // 이게 부모노드(min값&&idx==val) 아니면 재귀
	{
		cout << "rootNodes[rootNode] : " << rootNodes[rootNode] << "\n";
		getRootNode( v, rootNodes, rootNodes[rootNode] );
	}
	else//맞으면 리턴
		rootNodes[idx] = rootNode;
}

int main(void)
{
	int computers, nodes;
	cin >> computers >> nodes;
	
	int rootNodes[computers];
	for(int i = 1 ; i <= computers ; i++)
		rootNodes[i] = i; // 각자의 루트노드는 일단 자신임.
	 
	vector< vector<int> > v;
	vector< int > column;
	for(int i = 0 ; i < computers+1 ; i++)
		v.push_back(column); 

	for(int i = 0 ; i < nodes ; i++)
	{
		int row, col; // 각 row는 value번째 컴퓨터의 nodes 를 담는다.
		cin >> row >> col;
		v[row].push_back(col);
		v[col].push_back(row);
	}// 2차원 인접행렬로 vector를 입력
	
	for(int i = 1 ; i < v.size() ; i++)
		rootNodes[i] = getRootNode(v,rootNodes,i);
	
	int counter = 0;
	for(int i = 2 ; i < computers + 1 ; i++)
		rootNodes[i] == 1 ? counter++ : counter = counter;

	cout << "______________________________\n";
	printTwoDimensionVector(v);
	cout << "______________________________\n";
	for(int i = 1 ; i < computers + 1 ; i++)
		cout << rootNodes[i] << " ";
	cout << "\n______________________________\n";

	cout << counter;
	
	return 0;
}
