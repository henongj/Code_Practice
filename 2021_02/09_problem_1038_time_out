#include<iostream>
#include<string>
using namespace std;


string& operator++(string& str)
{
	auto num = stoi(str);
	num++;
	str = to_string(num);
	return str;
}

inline void setString(string &s , int len)
{
	for(int i = 0 ; i < len ; i++)
	{
		s = to_string(i) + s;
	}
}

void setStringNumber(string &s , int len)
{
	for(int i = len-1 ; i > 0 ; i--)
	{
		if( s[i-1] <= s[i] ) //s[0] <= s[1] // 31
		{
			s[i] = '0';
			s[i-1] = s[i-1] + 1;
		}
	}
}


bool isDecreasingNumber(const string& s , int len)
{ //감소수 판별
	int flag = true;
	for(int i = 0 ; i < len - 1 ; i++)
	{
		if(flag == false)
			break;
		if( !(s[i] > s[i+1]) )
			flag = false;
	}
	return flag;
}

void setTargetInfo(int &length ,int &target , int table[] , int tableSize)
{ //
	length = 1;
	for(int i = 0 ; i < tableSize ; i++)
	{
		if(table[i] < target)
		{
			length++; // 10은 11번째 감소하는 수
			target = target - table[i];//그러면 10은 2자리 수 중에서 1번째 감소하는 수
		}
		else
			break;
	}
}

int main(void)
{
	int n;
	cin >> n;
	int target = n;
	
	int table[] = {10,45,120,210,252,210,120,45,10,1}; // tableSize == 10
	if(n >= 1024)
		cout << "-1";
	else
	{
		if(n < 10) // 0~9는 감소하는 수
			cout << n;
		else
		{
			int len;
			setTargetInfo(len , target , table , 10);

			string answer = "";
			setString(answer , len);
	//		cout << "len , answer : " << len << "  " << answer << endl;

			while(target >= 0)
			{
				if(isDecreasingNumber(answer,len))
				{
				//	cout << "isDecreasingNumber : " << answer << endl;
					--target;
					if(target < 0)
						break;
					++answer;
					setStringNumber(answer,len);
				}
			}
			cout << answer;
		}
	}
	
	
	return 0;
}
