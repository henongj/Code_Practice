#include<iostream>
#include<utility>
#include<cmath>
#include<vector>
using namespace std;
int n;
typedef pair<int,int> pii;

const pii kLeftUp(-1,1);
const pii kLeftDown(-1,-1);
const pii kRightUp(1,1);
const pii kRightDown(1,-1);

pii& operator+=(pii& left , const pii& right)
{
	left.first = left.first + right.first;
	left.second = left.second + right.second;
	return left;
}

pii operator+(pii left , const pii& right)
{
	left += right;
	return left;
}
template<typename T>
inline bool compare_pair(const T &p1 , const T &p2)
{
	return (p1.first == p2.first && p1.second == p2.second) ? true : false;
}
inline bool canDivide(int number , int divider)
{
	return (divider == 0) ? (false) : (number % divider == 0 ? true : false);
}

void print_grid(const vector<vector<int>> &arr)
{
	for(int row = 0 ; row < arr.size() ; row++)
	{
		for(int col = 0 ; col < arr[row].size() ; col++)
		{
			cout << arr[row][col] << " ";
		}
		cout << endl;
	}
}

pii findQuadrant(const int &nowN , const pii &hit)
{//first = x = col , second = y = row
	int halfN = nowN/2; //8이 오면 0,1,2,3 / 4,5,6,7 이다. 
	if(hit.first < halfN && hit.second < halfN)
		return kLeftUp; //4사분면
	else if(hit.first < halfN && hit.second >= halfN)
		return kLeftDown; //3사분면
	else if(hit.first >= halfN && hit.second >= halfN)
		return kRightDown; //2사분면
	else if(hit.first >= halfN && hit.second < halfN)
		return kRightUp; //1사분면
}

//hit이 존재하는 사분면을 찾는 함수
/*
1 nowN 과 hit.first hit.second 값으로 사분면을 찾는다
	2 사분면이 좌상, 우상, 좌하, 우하 에 따라 order 값을 더한다.
		2.1 좌상의 경우 0~nowN/4-1 , 우상 nowN/4 ~ 2nowN/4-1 좌하 2nowN/4 ~ 3nowN/4-1 , 우하 3nowN/4 ~ nowN으로 범위를 좁힌다.
		2.2 사분면이 결정되면 그만큼 order를 더하고 해당 사분면을 기준으로 findHitZone을 부른다.
	3. nowN의 값이 2가 될 경우, 사분면을 결정해서 order값을 정하고 return 한다.
*/
void findHitZone(long long int &order , int nowN ,const pii &hit ,pii &finder , long long int &value)
{
	if(nowN == 2)
	{
		if(compare_pair(finder , hit))
			return;
		else if(compare_pair(finder+make_pair(0,1) , hit))
		{
			order++;
			return;
		}
		else if(compare_pair(finder+make_pair(1,0) , hit))
		{
			order = order + 2;
			return;
		}
		else{
			order = order + 3;
			return;
		}
		
	}
	
	long long int quarterValue = value / 4;
	int halfN = nowN/2;
	if(findQuadrant(nowN , hit) == kLeftUp)
	{ //4사분면일 경우
		cout << "4 사분면 order : " << order << " finder : "<< finder.first << " " << finder.second << "\n";
		findHitZone(order , halfN , hit , finder, quarterValue);
	}
	else if(findQuadrant(nowN , hit) == kLeftDown)
	{//3사분면일 경우
		order = order + 2*quarterValue;
		cout << "3 사분면 order : " << order << " finder : "<< finder.first << " " << finder.second << "\n";
		finder = finder + make_pair(0,halfN);
		findHitZone(order , halfN , hit , finder, quarterValue);
	}
	else if(findQuadrant(nowN , hit) == kRightDown)
	{//2
		order = order + 3*quarterValue;
		cout << "2 사분면 order : " << order << " finder : "<< finder.first << " " << finder.second << "\n";
		finder = finder + make_pair(halfN,halfN);
		findHitZone(order , halfN , hit , finder, quarterValue);
	}
	else
	{//1
		order = order + quarterValue;
		cout << "1 사분면 order : " << order << " finder : "<< finder.first << " " << finder.second << "\n";
		finder = finder + make_pair(halfN,0);
		findHitZone(order , halfN , hit , finder, quarterValue);
	}
}


int main(void)
{
	int r , c;
	cin >> n >> r >> c ;
	n = pow(2,n);
	long long int value = n*n;
	//row 세로 == 행 == y == second , col 가로 == 열 == x == first
	
	pii hit(c,r);
	pii finder(0,0); // 기준
	long long int order = 0;		
/*	vector<vector<int>> arr;
	vector<int> row;
	for(int i = 0 ; i < n ; i++)
	{
		arr.push_back(row);
		for(int j = 0 ;  j < n ; j++)
			arr[i].push_back(0);
	}//2차원 배열 만들기
	divideZStyle(arr,order,n,pos);
*/
	findHitZone(order,n,hit,finder, value);
	
	cout << order;
	
	return 0;
}
